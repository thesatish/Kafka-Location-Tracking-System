version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "student-registered:1:1,fee-paid:1:1"
    depends_on:
      - zookeeper


  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # location-producer:
    # build:
    #   context: .
    #   dockerfile: location-producer/Dockerfile
    # ports:
    #   - "3001:3001"
    # depends_on:
    #   kafka:
    #     condition: service_healthy
    # restart: on-failure
    # environment:
    #   KAFKA_BROKER: kafka:9092
    #   PORT: 3001
    #   TOPIC_NAME: location-updates

  location-producer:
    build: ./location-producer
    container_name: location-producer
    ports:
      - "3001:3001"
    environment:
      KAFKA_BROKER: kafka:9092
      PORT: 3001
      TOPIC_NAME: location-updates
    depends_on:
      - kafka



  location-consumer:
    build: ./location-consumer
    container_name: location-consumer  
    depends_on:
      - kafka
      - mongo
    ports:
      - "3000:3000"   # consumer's REST/WebSocket server
      - "8080:8080"   # WebSocket port if used separately
    environment:
      KAFKA_BROKER: kafka:9092
      MONGO_URI: mongodb://mongo:27017/locationdb
      PORT: 3000
volumes:
  mongo_data:
  pg_data:
